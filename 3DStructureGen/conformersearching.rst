Conformer searching
===================

Given a 3D structure, the goal of conformer searching is to find a low energy conformation. This may be useful as a "clean-up" procedure after an initial 3D structure generation. Note that conformer searching does not alter stereochemistry.

The Open Babel library provides access to several algorithms for conformer searching. All of these algorithms adopt the torsion-driving approach; that is, conformations are generated by setting torsion angles to one of a number of allowed values. The allowed values are listed in the data file :file:`torlib.txt`; for example, C-C bonds in alkanes have three allowed values: -60, 60 and 180.

1. :obapi:`Systematic Rotor Search <SystematicRotorSearch>`: Systematically
   iterate through all possible
   conformers according to Open Babel's torsion library.
   This approach is thorough and will
   find the global minimum. However as
   the number of conformations increases by multiples for each additional
   rotational bond, this can take quite a while for molecules with even just
   7 rotatable bonds. This approach scales to the power of N, where N is the
   number of rotatable bonds.

2. :obapi:`Fast Rotor Search <FastRotorSearch>`: This iterates through the
   same conformer space as the
   SystematicRotorSearch but it greedily optimises the torsion angle at each
   rotatable bond in turn, starting from the most central. Thus it scales
   linearly with the number of rotatable bonds.

3. :obapi:`Random Rotor Search <RandomRotorSearch>`: Conformations are
   generated by randomly choosing from the allowed torsion angles.

4. :obapi:`Weighted Rotor Search <WeightedRotorSearch>`: This method uses an
   iterative procedure to find a
   global minimum. As with the Random Rotor Search, it randomly choses from
   the allowed torsion angles but the choice is reweighted based on the energy
   of the generated conformer. Over time, the generated conformer for each
   step should become increasingly better.

For each of these methods, the lowest energy conformation found is selected. In some cases, the entire set of conformations generated is also available. Many
of these methods include an option to optimize the geometry of conformations
during the search. This greatly slows down the procedure but may produce more
accurate results.

The choice of which algorithm to use depends on the speed/accuracy tradeoff with
which you are happy, and also on the number of rotatable bonds in the molecule.
Are you looking for a reasonable structure for 3D display? Or are you looking
for a structure close to the global minimum?

To use from **obabel**, see the help for the conformer operation (``obabel -L conformer``). This operation is used both for conformer searching and for the genetic algorithm conformer generation described below.

Here is an example of use from Python:

::

    >>> ff = ob.OBForceField.FindForceField("mmff94")
    >>> ff.Setup(obmol)
    True
    >>> print ff.Energy()
    15.179054202
    >>> ff.SystematicRotorSearch(100)
    >>> print ff.Energy()
    10.8861155747

